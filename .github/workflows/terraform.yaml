name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color 
        continue-on-error: true

      # You cannot save the tfplan output from the Hashicorp GitHub Action
      # So we can workaround this by parsing out the Run ID and then fetching it from Terraform Cloud
      - name: Get TF-Plan JSON
        # uses: actions/github-script@0.9.0 
        id: tfplan-json
        # with:
          # script: |
        shell: bash
        run: |
          TERRAFORM_API_HOST=https://app.terraform.io

          plan=$(echo ${{ steps.plan.outputs.stdout | tee /dev/stderr }})
          echo $plan

          plan_path=$(echo $plan | grep -Eo 'runs/run-[A-Za-z0-9]+')
          echo $plan_path

          plan_json_path=$(curl -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" $TERRAFORM_API_HOST/api/v2/${plan_path}/plan | jq -r '.data.links["json-output"]')
          echo $plan_json_path

          curl -H "Authorization: Bearer ${{ secrets.TF_API_TOKEN}}" -H "Content-Type: application/vnd.api+json" -L $TERRAFORM_API_HOST$plan_json_path > tf-plan.json

      
      # - name: Upload Plan Artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: terraform-plan
      #     path: tfplan.binary

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Run Snyk IaC
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test tf-plan.json --experimental
      
      # - name: Download a single artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: terraform-plan

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      #   run: terraform apply -auto-approve