name: "Terraform"

on:
  # push:
  #   branches:
  #     - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color 
        continue-on-error: true

      # You cannot save the tfplan output from the Hashicorp GitHub Action
      # So we can workaround this by parsing out the Run ID and then fetching it from Terraform Cloud
      - name: Get TF-Plan JSON
        id: tfplan-json
        run: sh ./terraform-plan.sh
        env:
          TERRAFORM_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          TF_PLAN_INPUT: ${{ steps.plan.outputs.stdout }}

      - name: Add Plan output to PR
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`${process.env.PLAN}\`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
         
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Build Custom Rules
        id: opa
        uses: aserto-dev/opa-build-action@main
        with:
          source: .
          target: ./custom.tar.gz
          options: -t wasm -e "main/deny"

      - name: Run Snyk IaC
        id: snyk
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test tf-plan.json --scan=planned-values --rules=custom.tar.gz --sarif-file-output=snyk.sarif
      
      - name: PATCH Fix Sarif file output
        id: patch-sarif
        run: sed 's/-1/1/' snyk.sarif > fixed.sarif

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: fixed.sarif
      
      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      #   run: terraform apply -auto-approve